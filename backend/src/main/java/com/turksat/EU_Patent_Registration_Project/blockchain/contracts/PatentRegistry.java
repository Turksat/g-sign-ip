package com.turksat.EU_Patent_Registration_Project.blockchain.contracts;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.Function;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;

public class PatentRegistry extends Contract {
    public static final String BINARY = "60806040525f5f553480156011575f5ffd5b506119278061001f5f395ff3fe608060405234801561000f575f5ffd5b5060043610610086575f3560e01c8063efd7cede11610059578063efd7cede14610115578063f12aef1e14610145578063f422bc6814610175578063f7023a67146101aa57610086565b80634f4b847b1461008a578063b084c841146100bf578063beb446a2146100dd578063dc3bb034146100f9575b5f5ffd5b6100a4600480360381019061009f9190610e4a565b6101da565b6040516100b696959493929190610f97565b60405180910390f35b6100c7610552565b6040516100d49190611021565b60405180910390f35b6100f760048036038101906100f29190611166565b610557565b005b610113600480360381019061010e9190611166565b6106ae565b005b61012f600480360381019061012a919061120d565b610804565b60405161013c9190611021565b60405180910390f35b61015f600480360381019061015a9190611166565b610ae8565b60405161016c9190611320565b60405180910390f35b61018f600480360381019061018a9190610e4a565b610b1d565b6040516101a196959493929190610f97565b60405180910390f35b6101c460048036038101906101bf9190611166565b610d98565b6040516101d19190611021565b60405180910390f35b5f6060806060805f5f87141580156101f357505f548711155b610232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022990611383565b60405180910390fd5b5f60015f8981526020019081526020015f206040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546102b3906113ce565b80601f01602080910402602001604051908101604052809291908181526020018280546102df906113ce565b801561032a5780601f106103015761010080835404028352916020019161032a565b820191905f5260205f20905b81548152906001019060200180831161030d57829003601f168201915b50505050508152602001600282018054610343906113ce565b80601f016020809104026020016040519081016040528092919081815260200182805461036f906113ce565b80156103ba5780601f10610391576101008083540402835291602001916103ba565b820191905f5260205f20905b81548152906001019060200180831161039d57829003601f168201915b505050505081526020016003820180546103d3906113ce565b80601f01602080910402602001604051908101604052809291908181526020018280546103ff906113ce565b801561044a5780601f106104215761010080835404028352916020019161044a565b820191905f5260205f20905b81548152906001019060200180831161042d57829003601f168201915b50505050508152602001600482018054610463906113ce565b80601f016020809104026020016040519081016040528092919081815260200182805461048f906113ce565b80156104da5780601f106104b1576101008083540402835291602001916104da565b820191905f5260205f20905b8154815290600101906020018083116104bd57829003601f168201915b50505050508152602001600582015f9054906101000a900460ff16600281111561050757610506610f24565b5b600281111561051957610518610f24565b5b815250509050805f015181602001518260400151836060015184608001518560a001519650965096509650965096505091939550919395565b5f5481565b5f6002826040516105689190611438565b90815260200160405180910390205490505f81036105bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b290611498565b60405180910390fd5b5f60028111156105ce576105cd610f24565b5b60015f8381526020019081526020015f206005015f9054906101000a900460ff16600281111561060157610600610f24565b5b14610641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063890611500565b60405180910390fd5b600260015f8381526020019081526020015f206005015f6101000a81548160ff0219169083600281111561067857610677610f24565b5b0217905550807fc27ae77ee74081e2dc3136ea5816e3cc77b383a0b893787eee0f78edf38bb72060405160405180910390a25050565b5f6002826040516106bf9190611438565b90815260200160405180910390205490505f8103610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990611498565b60405180910390fd5b5f600281111561072557610724610f24565b5b60015f8381526020019081526020015f206005015f9054906101000a900460ff16600281111561075857610757610f24565b5b14610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90611500565b60405180910390fd5b6001805f8381526020019081526020015f206005015f6101000a81548160ff021916908360028111156107ce576107cd610f24565b5b0217905550807f796f708671f7d4bc520ad54db2dd5bb096ab2ad45f9c40b92a5180d14b80211560405160405180910390a25050565b5f6003866040516108159190611438565b90815260200160405180910390205f9054906101000a900460ff1615610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086790611568565b60405180910390fd5b60028081111561088357610882610f24565b5b60ff168260ff1611156108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c2906115d0565b60405180910390fd5b5f8260ff1660028111156108e2576108e1610f24565b5b90505f5f8154809291906108f59061161b565b91905055506040518060c001604052808973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200185815260200182600281111561094c5761094b610f24565b5b81525060015f5f5481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816109ba9190611802565b5060408201518160020190816109d09190611802565b5060608201518160030190816109e69190611802565b5060808201518160040190816109fc9190611802565b5060a0820151816005015f6101000a81548160ff02191690836002811115610a2757610a26610f24565b5b02179055509050505f54600288604051610a419190611438565b9081526020016040518091039020819055506001600388604051610a659190611438565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055508773ffffffffffffffffffffffffffffffffffffffff165f547f694c9d7f017fd6298a73f315995ca4179c9e0c6ef2575c1d45ee050c0455494089604051610ad191906118d1565b60405180910390a35f549150509695505050505050565b6003818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900460ff1681565b6001602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610b61906113ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8d906113ce565b8015610bd85780601f10610baf57610100808354040283529160200191610bd8565b820191905f5260205f20905b815481529060010190602001808311610bbb57829003601f168201915b505050505090806002018054610bed906113ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610c19906113ce565b8015610c645780601f10610c3b57610100808354040283529160200191610c64565b820191905f5260205f20905b815481529060010190602001808311610c4757829003601f168201915b505050505090806003018054610c79906113ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca5906113ce565b8015610cf05780601f10610cc757610100808354040283529160200191610cf0565b820191905f5260205f20905b815481529060010190602001808311610cd357829003601f168201915b505050505090806004018054610d05906113ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610d31906113ce565b8015610d7c5780601f10610d5357610100808354040283529160200191610d7c565b820191905f5260205f20905b815481529060010190602001808311610d5f57829003601f168201915b505050505090806005015f9054906101000a900460ff16905086565b5f5f600283604051610daa9190611438565b90815260200160405180910390205490505f8103610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490611498565b60405180910390fd5b80915050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b610e2981610e17565b8114610e33575f5ffd5b50565b5f81359050610e4481610e20565b92915050565b5f60208284031215610e5f57610e5e610e0f565b5b5f610e6c84828501610e36565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e9e82610e75565b9050919050565b610eae81610e94565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610ef682610eb4565b610f008185610ebe565b9350610f10818560208601610ece565b610f1981610edc565b840191505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60038110610f6257610f61610f24565b5b50565b5f819050610f7282610f51565b919050565b5f610f8182610f65565b9050919050565b610f9181610f77565b82525050565b5f60c082019050610faa5f830189610ea5565b8181036020830152610fbc8188610eec565b90508181036040830152610fd08187610eec565b90508181036060830152610fe48186610eec565b90508181036080830152610ff88185610eec565b905061100760a0830184610f88565b979650505050505050565b61101b81610e17565b82525050565b5f6020820190506110345f830184611012565b92915050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61107882610edc565b810181811067ffffffffffffffff8211171561109757611096611042565b5b80604052505050565b5f6110a9610e06565b90506110b5828261106f565b919050565b5f67ffffffffffffffff8211156110d4576110d3611042565b5b6110dd82610edc565b9050602081019050919050565b828183375f83830152505050565b5f61110a611105846110ba565b6110a0565b9050828152602081018484840111156111265761112561103e565b5b6111318482856110ea565b509392505050565b5f82601f83011261114d5761114c61103a565b5b813561115d8482602086016110f8565b91505092915050565b5f6020828403121561117b5761117a610e0f565b5b5f82013567ffffffffffffffff81111561119857611197610e13565b5b6111a484828501611139565b91505092915050565b6111b681610e94565b81146111c0575f5ffd5b50565b5f813590506111d1816111ad565b92915050565b5f60ff82169050919050565b6111ec816111d7565b81146111f6575f5ffd5b50565b5f81359050611207816111e3565b92915050565b5f5f5f5f5f5f60c0878903121561122757611226610e0f565b5b5f61123489828a016111c3565b965050602087013567ffffffffffffffff81111561125557611254610e13565b5b61126189828a01611139565b955050604087013567ffffffffffffffff81111561128257611281610e13565b5b61128e89828a01611139565b945050606087013567ffffffffffffffff8111156112af576112ae610e13565b5b6112bb89828a01611139565b935050608087013567ffffffffffffffff8111156112dc576112db610e13565b5b6112e889828a01611139565b92505060a06112f989828a016111f9565b9150509295509295509295565b5f8115159050919050565b61131a81611306565b82525050565b5f6020820190506113335f830184611311565b92915050565b7f496e76616c6964204944000000000000000000000000000000000000000000005f82015250565b5f61136d600a83610ebe565b915061137882611339565b602082019050919050565b5f6020820190508181035f83015261139a81611361565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806113e557607f821691505b6020821081036113f8576113f76113a1565b5b50919050565b5f81905092915050565b5f61141282610eb4565b61141c81856113fe565b935061142c818560208601610ece565b80840191505092915050565b5f6114438284611408565b915081905092915050565b7f506174656e74206e6f7420666f756e64000000000000000000000000000000005f82015250565b5f611482601083610ebe565b915061148d8261144e565b602082019050919050565b5f6020820190508181035f8301526114af81611476565b9050919050565b7f4d757374206265205265676973746572656400000000000000000000000000005f82015250565b5f6114ea601283610ebe565b91506114f5826114b6565b602082019050919050565b5f6020820190508181035f830152611517816114de565b9050919050565b7f416c7265616479207265676973746572656400000000000000000000000000005f82015250565b5f611552601283610ebe565b915061155d8261151e565b602082019050919050565b5f6020820190508181035f83015261157f81611546565b9050919050565b7f496e76616c69642073746174757320636f6465000000000000000000000000005f82015250565b5f6115ba601383610ebe565b91506115c582611586565b602082019050919050565b5f6020820190508181035f8301526115e7816115ae565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61162582610e17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611657576116566115ee565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026116be7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611683565b6116c88683611683565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6117036116fe6116f984610e17565b6116e0565b610e17565b9050919050565b5f819050919050565b61171c836116e9565b6117306117288261170a565b84845461168f565b825550505050565b5f5f905090565b611747611738565b611752818484611713565b505050565b5b818110156117755761176a5f8261173f565b600181019050611758565b5050565b601f8211156117ba5761178b81611662565b61179484611674565b810160208510156117a3578190505b6117b76117af85611674565b830182611757565b50505b505050565b5f82821c905092915050565b5f6117da5f19846008026117bf565b1980831691505092915050565b5f6117f283836117cb565b9150826002028217905092915050565b61180b82610eb4565b67ffffffffffffffff81111561182457611823611042565b5b61182e82546113ce565b611839828285611779565b5f60209050601f83116001811461186a575f8415611858578287015190505b61186285826117e7565b8655506118c9565b601f19841661187886611662565b5f5b8281101561189f5784890151825560018201915060208501945060208101905061187a565b868310156118bc57848901516118b8601f8916826117cb565b8355505b6001600288020188555050505b505050505050565b5f6020820190508181035f8301526118e98184610eec565b90509291505056fea2646970667358221220af30272c3a66868401a393dfb17c1c37d7eaf2223b64e90f877544426bf1b1a064736f6c634300081e0033";

    public static final String FUNC_REGISTERPATENT = "registerPatent";
    public static final String FUNC_GRANTPATENTBYAPPNO = "grantPatentByAppNo";
    public static final String FUNC_REJECTPATENTBYAPPNO = "rejectPatentByAppNo";
    public static final String FUNC_GETPATENTIDBYAPPNO = "getPatentIdByAppNo";
    public static final String FUNC_GETPATENTBYID = "getPatentById";
    public static final String FUNC_ISAPPNOUSED = "isAppNoUsed";
    public static final String FUNC_PATENTCOUNT = "patentCount";
    public static final String FUNC_PATENTS = "patents";

    public PatentRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, gasProvider);
    }


    public RemoteCall<TransactionReceipt> registerPatent(String createdBy, String appNo, String title, String description, String ipfsHash, BigInteger statusCode) {
        final Function function = new Function(
                FUNC_REGISTERPATENT,
                Arrays.asList(new Address(createdBy), new Utf8String(appNo), new Utf8String(title), new Utf8String(description), new Utf8String(ipfsHash), new Uint8(statusCode)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> grantPatentByAppNo(String appNo) {
        final Function function = new Function(
                FUNC_GRANTPATENTBYAPPNO,
                Arrays.asList(new Utf8String(appNo)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectPatentByAppNo(String appNo) {
        final Function function = new Function(
                FUNC_REJECTPATENTBYAPPNO,
                Arrays.asList(new Utf8String(appNo)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getPatentIdByAppNo(String appNo) {
        final Function function = new Function(
                FUNC_GETPATENTIDBYAPPNO,
                Arrays.asList(new Utf8String(appNo)),
                Arrays.asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List<Type>> getPatentById(BigInteger id) {
        final Function function = new Function(
                FUNC_GETPATENTBYID,
                Arrays.asList(new Uint256(id)),
                Arrays.asList(
                        new TypeReference<Address>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint8>() {}
                ));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteCall<Boolean> isAppNoUsed(String appNo) {
        final Function function = new Function(
                FUNC_ISAPPNOUSED,
                Arrays.asList(new Utf8String(appNo)),
                Arrays.asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> patentCount() {
        final Function function = new Function(
                FUNC_PATENTCOUNT,
                Arrays.asList(),
                Arrays.asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static PatentRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider gasProvider) {
        return new PatentRegistry(contractAddress, web3j, transactionManager, gasProvider);
    }





}
